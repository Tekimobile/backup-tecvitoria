{"createdAt":"2025-07-08T21:44:19.877Z","updatedAt":"2025-09-10T15:53:37.841Z","id":"ZyirVQkghBhmjaxg","name":"Dashboard","active":true,"isArchived":false,"nodes":[{"parameters":{"path":"dashboard","responseMode":"responseNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":1,"position":[400,352],"id":"218d6ba1-34d1-448c-8369-da0ef948df36","name":"Webhook Trigger","webhookId":"31263936-b790-43a7-b80c-a8f3da30e252"},{"parameters":{"operation":"getAll","tableId":"qualification_results_duplicate","returnAll":true},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[624,352],"id":"29b68eab-f10e-441d-9999-0e0ce6a3719b","name":"Busca Supabase","credentials":{"supabaseApi":{"id":"OaqABPiG2T08H6kW","name":"Supabase account"}}},{"parameters":{"jsCode":"const input = $input.all();\nlet dados = [];\n\nif (input && input.length > 0) {\n  if (input.length > 1) {\n    dados = input.map(item => item.json || item);\n  } else {\n    const firstItem = input[0];\n    if (firstItem.json && Array.isArray(firstItem.json)) {\n      dados = firstItem.json;\n    } else {\n      dados = input.map(item => item.json || item);\n    }\n  }\n}\n\nfunction hasNullValues(data) {\n  const campos = ['Plano de negócios', 'TamSamSom', 'Pesquisa qualitativa:', 'Mapeamento concorrentes', 'Persona', 'Pitch', 'Programas'];\n  return campos.some(campo => data[campo] === null || data[campo] === undefined);\n}\n\nfunction normalizeResultado(resultado, pontuacao, data) {\n  const score = Number(pontuacao || 0);\n  if (hasNullValues(data)) {\n    return 'Não concluído';\n  }\n  if (!resultado || resultado === '' || score < 3) {\n    return 'Trilha Inicial';\n  }\n  const resultadoStr = String(resultado).trim();\n  if (resultadoStr === 'Aprovado para Incubação') return 'Aprovado Incubação';\n  if (resultadoStr === 'Trilha Avançada') return 'Trilha Avançada';\n  if (resultadoStr === 'Trilha Inicial') return 'Trilha Inicial';\n  return 'Trilha Inicial';\n}\n\nfunction getIndicatorStatus(value) {\n  if (value === null || value === undefined) return 'red';\n  if (!value || value === '') return 'red';\n  const valueStr = String(value).toLowerCase().trim();\n  if (valueStr === 'sim') return 'green';\n  if (valueStr === 'não') return 'red';\n  if (valueStr === 'ainda não realizei') return 'red';\n  if (valueStr === 'nao_realizei') return 'red';\n  if (valueStr === 'sim, com dados organizados') return 'green';\n  if (valueStr === 'dados_organizados') return 'green';\n  if (valueStr === 'informal') return 'yellow';\n  if (valueStr === 'fiz informalmente, mas sem dados registrados' || valueStr === 'informalmente sem dados registrados') return 'yellow';\n  return 'red';\n}\n\nconst processedData = dados.map((item, index) => {\n  const data = item.json || item;\n  const pontuacao = Number(data.pontuacao || 0);\n  const dataFormatada = data.created_at \n    ? new Date(data.created_at).toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) \n    : 'N/A';\n  return {\n    id: data.id || index + 1,\n    nome: String(data.nome || 'N/A').trim(),\n    projeto: String(data.projeto || 'N/A').trim(),\n    email: String(data.email || 'N/A').trim(),\n    whatsapp: String(data.whatsapp || 'N/A'),\n    pontuacao: pontuacao,\n    created_at: dataFormatada,\n    resultado: normalizeResultado(data.resultado, pontuacao, data),\n    indicadores: {\n      plano_negocios: getIndicatorStatus(data['Plano de negócios']),\n      tam_sam_som: getIndicatorStatus(data['TamSamSom']),\n      pesquisa_qualitativa: getIndicatorStatus(data['Pesquisa qualitativa:']),\n      mapeamento_concorrentes: getIndicatorStatus(data['Mapeamento concorrentes']),\n      persona: getIndicatorStatus(data['Persona']),\n      pitch: getIndicatorStatus(data['Pitch']),\n      programas: getIndicatorStatus(data['Programas'])\n    },\n    respostas_originais: {\n      plano_negocios: data['Plano de negócios'] || 'N/A',\n      tam_sam_som: data['TamSamSom'] || 'N/A',\n      pesquisa_qualitativa: data['Pesquisa qualitativa:'] || 'N/A',\n      mapeamento_concorrentes: data['Mapeamento concorrentes'] || 'N/A',\n      persona: data['Persona'] || 'N/A',\n      pitch: data['Pitch'] || 'N/A',\n      programas: data['Programas'] || 'N/A'\n    }\n  };\n});\n\nconst hoje = new Date().toLocaleDateString('pt-BR', { timeZone: 'America/Sao_Paulo' });\nconst novosHoje = processedData.filter(item => {\n  if (!item.created_at || item.created_at === 'N/A') return false;\n  try {\n    const dataItem = new Date(item.created_at);\n    const dataStr = dataItem.toLocaleDateString('pt-BR', { timeZone: 'America/Sao_Paulo' });\n    return dataStr === hoje;\n  } catch (e) {\n    return false;\n  }\n}).length;\n\nconst aprovadosIncubacao = processedData.filter(item => item.resultado === 'Aprovado Incubação').length;\nconst trilhaAvancada = processedData.filter(item => item.resultado === 'Trilha Avançada').length;\nconst trilhaInicial = processedData.filter(item => item.resultado === 'Trilha Inicial').length;\nconst naoConcluido = processedData.filter(item => item.resultado === 'Não concluído').length;\n\n// NOVO BLOCO: CONTAR CADASTROS POR MÊS (formato '09/2025') e do mês atual\nconst cadastradosPorMes = {};\nprocessedData.forEach(item => {\n  if (item.created_at && item.created_at !== 'N/A') {\n    // Data pt-BR ex: '10/09/2025, 08:26:05'\n    const partes = item.created_at.split('/');\n    if (partes.length >= 2) {\n      const mesAno = `${partes[1]}/${partes[2].slice(0,4)}`; // '09/2025'\n      cadastradosPorMes[mesAno] = (cadastradosPorMes[mesAno] || 0) + 1;\n    }\n  }\n});\nconst now = new Date();\nconst mesAtual = ('0' + (now.getMonth() + 1)).slice(-2) + '/' + now.getFullYear();\nconst inscricoesMesAtual = cadastradosPorMes[mesAtual] || 0;\n\n// RETORNO FINAL\nreturn {\n  json: {\n    dados: processedData,\n    stats: {\n      total: processedData.length,\n      novosHoje: novosHoje,\n      aprovadosIncubacao: aprovadosIncubacao,\n      trilhaAvancada: trilhaAvancada,\n      trilhaInicial: trilhaInicial,\n      naoConcluido: naoConcluido,\n      // Novos campos:\n      cadastradosPorMes,\n      inscricoesMesAtual,\n      mesAtual\n    },\n    ultimaAtualizacao: new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })\n  }\n};\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[848,352],"id":"f743488e-c89b-45a4-93d8-67d63bb526aa","name":"Processar Dados"},{"parameters":{"assignments":{"assignments":[{"id":"response-field","name":"response","value":"=<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dashboard de Incubação</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js\"></script>\n    <style>\n        .table-container { max-height: 600px; overflow-y: auto; overflow-x: auto; }\n        .badge { padding: 0.25rem 0.5rem; border-radius: 9999px; font-size: 0.75rem; font-weight: 500; text-transform: uppercase; }\n        .phone { font-family: 'Courier New', monospace; color: #4f46e5; }\n        .loading { text-align: center; padding: 2rem; color: #4f46e5; }\n        .whatsapp-btn { background-color: #25d366; color: white; padding: 0.25rem 0.5rem; border-radius: 0.375rem; font-size: 0.75rem; text-decoration: none; display: inline-block; }\n        .whatsapp-btn:hover { background-color: #128c7e; }\n        .email-btn { background-color: #3b82f6; color: white; padding: 0.25rem 0.5rem; border-radius: 0.375rem; font-size: 0.75rem; text-decoration: none; display: inline-block; margin-left: 0.25rem; }\n        .email-btn:hover { background-color: #2563eb; }\n        .score-high { color: #059669; font-weight: bold; }\n        .score-medium { color: #d97706; font-weight: bold; }\n        .score-low { color: #dc2626; font-weight: bold; }\n        .indicator { display: inline-block; width: 12px; height: 12px; border-radius: 50%; margin-right: 6px; flex-shrink: 0; }\n        .indicator.green { background-color: #10b981; }\n        .indicator.yellow { background-color: #f59e0b; }\n        .indicator.red { background-color: #ef4444; }\n        .indicators-list { font-size: 0.75rem; line-height: 1.4; }\n        .indicators-list div { margin-bottom: 2px; display: flex; align-items: center; white-space: nowrap; }\n        \n        /* Estilos para cabeçalhos clicáveis */\n        #dataTable thead th[data-key] {\n            cursor: pointer;\n            position: relative;\n            user-select: none;\n        }\n\n        #dataTable thead th[data-key]:hover {\n            background-color: rgba(255, 255, 255, 0.1);\n        }\n\n        /* Indicadores de ordenação */\n        #dataTable thead th.sort-asc::after {\n            content: ' ▲';\n            font-size: 0.8em;\n            color: #fbbf24;\n        }\n\n        #dataTable thead th.sort-desc::after {\n            content: ' ▼';\n            font-size: 0.8em;\n            color: #fbbf24;\n        }\n        \n        /* Ajustes para mobile - Coluna Indicadores */\n        @media (max-width: 768px) {\n            .table-container {\n                overflow-x: auto;\n            }\n            \n            table#dataTable {\n                min-width: 800px;\n            }\n            \n            /* Garantir largura mínima adequada para a coluna Indicadores */\n            table#dataTable th:nth-child(5),\n            table#dataTable td:nth-child(5) {\n                min-width: 200px;\n                width: 200px;\n            }\n            \n            /* Evitar quebra de linha nos indicadores */\n            .indicators-list div {\n                white-space: nowrap;\n                overflow: hidden;\n            }\n            \n            /* Garantir que o círculo não se distorça */\n            .indicator {\n                flex-shrink: 0;\n                min-width: 12px;\n                min-height: 12px;\n            }\n        }\n        \n        /* Ajustes para telas muito pequenas */\n        @media (max-width: 480px) {\n            table#dataTable th:nth-child(5),\n            table#dataTable td:nth-child(5) {\n                min-width: 220px;\n                width: 220px;\n            }\n        }\n    </style>\n</head>\n<body class=\"bg-gray-100 min-h-screen p-6\">\n    <div class=\"max-w-7xl mx-auto bg-white rounded-2xl shadow-xl overflow-hidden\">\n        <div class=\"bg-gradient-to-r from-indigo-600 to-purple-600 p-8 text-white flex flex-col items-center justify-center text-center\">\n            <h1 class=\"text-3xl font-bold\">\n                <img src=\"https://tecvitoria.com.br/wp-content/uploads/2025/04/logo-amarelo.webp\" width=\"350px\" />\n            </h1>\n            <p class=\"mt-2 opacity-90\">Registro de candidatos a incubação</p>\n        </div>\n        <div class=\"p-6 bg-gray-50\">\n            <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4\">\n                <div class=\"bg-white p-6 rounded-lg shadow-md text-center\">\n                    <h2 class=\"text-2xl font-bold text-indigo-600\" id=\"totalUsers\">-</h2>\n                    <p class=\"text-sm text-gray-600\">Total de Candidatos</p>\n                </div>\n<div class=\"bg-white p-6 rounded-lg shadow-md text-center\">\n    <h2 class=\"text-2xl font-bold text-blue-700\" id=\"cadastrosMesAtual\">-</h2>\n    <p class=\"text-sm text-gray-600\">\n    <span id=\"labelMesAtual\"></span>\n      <button onclick=\"toggleMonthFilter()\" class=\"ml-2 underline text-xs text-blue-600\">Filtrar</button>\n    </p>\n    <div id=\"filtroMeses\" style=\"display:none;\">\n      <select id=\"selectMes\" class=\"mt-2 border p-1 rounded-lg\">\n      </select>\n    </div>\n</div>\n\n                <div class=\"bg-white p-6 rounded-lg shadow-md text-center\">\n                    <h2 class=\"text-2xl font-bold text-green-600\" id=\"aprovadosIncubacao\">-</h2>\n                    <p class=\"text-sm text-gray-600\">Aprovados Incubação</p>\n                </div>\n                <div class=\"bg-white p-6 rounded-lg shadow-md text-center\">\n                    <h2 class=\"text-2xl font-bold text-purple-600\" id=\"trilhaAvancada\">-</h2>\n                    <p class=\"text-sm text-gray-600\">Trilha Avançada</p>\n                </div>\n                <div class=\"bg-white p-6 rounded-lg shadow-md text-center\">\n                    <h2 class=\"text-2xl font-bold text-orange-600\" id=\"trilhaInicial\">-</h2>\n                    <p class=\"text-sm text-gray-600\">Trilha Inicial</p>\n                </div>\n                <div class=\"bg-white p-6 rounded-lg shadow-md text-center\">\n                    <h2 class=\"text-2xl font-bold text-red-600\" id=\"naoConcluido\">-</h2>\n                    <p class=\"text-sm text-gray-600\">Não Concluído</p>\n                </div>\n            </div>\n        </div>\n        <div class=\"p-6\">\n            <div class=\"mb-4 flex gap-2\">\n                <button id=\"exportBtn\" class=\"bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg\">📊 Exportar para Excel</button>\n            </div>\n            <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n                <div>\n                    <label class=\"block text-sm font-medium text-gray-700\">Ordenar por</label>\n                    <select id=\"sortBy\" class=\"mt-1 block w-full p-2 border border-gray-300 rounded-lg\">\n                        <option value=\"pontuacao\">Pontuação (Maior)</option>\n                        <option value=\"pontuacao-desc\">Pontuação (Menor)</option>\n                        <option value=\"created_at\">Data (Mais Recente)</option>\n                        <option value=\"created_at-desc\">Data (Mais Antigo)</option>\n                        <option value=\"nome\">Nome (A-Z)</option>\n                        <option value=\"nome-desc\">Nome (Z-A)</option>\n                    </select>\n                </div>\n                <div>\n                    <label class=\"block text-sm font-medium text-gray-700\">Resultado</label>\n                    <select id=\"filterStatus\" class=\"mt-1 block w-full p-2 border border-gray-300 rounded-lg\">\n                        <option value=\"\">Todos</option>\n                        <option value=\"Aprovado Incubação\">Aprovado Incubação</option>\n                        <option value=\"Trilha Avançada\">Trilha Avançada</option>\n                        <option value=\"Trilha Inicial\">Trilha Inicial</option>\n                        <option value=\"Não concluído\">Não Concluído</option>\n                    </select>\n                </div>\n                <div>\n                    <label class=\"block text-sm font-medium text-gray-700\">Buscar Nome</label>\n                    <input type=\"text\" id=\"searchName\" class=\"mt-1 block w-full p-2 border border-gray-300 rounded-lg\" placeholder=\"Digite o nome...\">\n                </div>\n                <div>\n                    <label class=\"block text-sm font-medium text-gray-700\">Buscar Projeto</label>\n                    <input type=\"text\" id=\"searchProject\" class=\"mt-1 block w-full p-2 border border-gray-300 rounded-lg\" placeholder=\"Digite o projeto...\">\n                </div>\n            </div>\n            <div class=\"table-container\">\n                <div class=\"loading\" id=\"loading\">Carregando dados...</div>\n                <table class=\"w-full bg-white rounded-lg shadow-md\" id=\"dataTable\" style=\"display: none;\">\n                    <thead>\n                        <tr class=\"bg-gradient-to-r from-indigo-600 to-purple-600 text-white\">\n                            <th class=\"p-4 text-left text-xs font-semibold uppercase\" data-key=\"nome\">Nome</th>\n                            <th class=\"p-4 text-left text-xs font-semibold uppercase\" data-key=\"projeto\">Projeto</th>\n                            <th class=\"p-4 text-left text-xs font-semibold uppercase\" data-key=\"resultado\">Resultado</th>\n                            <th class=\"p-4 text-left text-xs font-semibold uppercase\" data-key=\"pontuacao\">Pontuação</th>\n                            <th class=\"p-4 text-left text-xs font-semibold uppercase\">Indicadores</th>\n                            <th class=\"p-4 text-left text-xs font-semibold uppercase\">WhatsApp</th>\n                            <th class=\"p-4 text-left text-xs font-semibold uppercase\">E-mail</th>\n                            <th class=\"p-4 text-left text-xs font-semibold uppercase\" data-key=\"created_at\">Data de preenchimento</th>\n                        </tr>\n                    </thead>\n                    <tbody id=\"tableBody\"></tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n    <script>\n      let userData = [];\nlet filteredData = [];\nconst dashboardData = {{ JSON.stringify($json) }};\n\n// Estado para controle da ordenação\nlet currentSortColumn = null;\nlet currentSortOrder = 'asc'; // 'asc' ou 'desc'\n\n// Converte \"MM/YYYY\" para nome do mês em português\nfunction nomeMesPorNumero(mesAno) {\n    if (!mesAno) return '-';\n    const meses = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',\n                   'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\n    const [mesStr] = mesAno.split('/');\n    const mesNum = Number(mesStr) - 1;\n    return meses[mesNum] || '-';\n}\n\n// Função para ordenar dados e renderizar tabela\nfunction sortByColumn(columnKey) {\n    if (currentSortColumn === columnKey) {\n        // Inverter ordem se já está ordenado por esta coluna\n        currentSortOrder = currentSortOrder === 'asc' ? 'desc' : 'asc';\n    } else {\n        currentSortColumn = columnKey;\n        currentSortOrder = 'asc';\n    }\n\n    filteredData.sort((a, b) => {\n        let valA = a[columnKey];\n        let valB = b[columnKey];\n\n        // Tratamento especial para cada tipo de coluna\n        if (columnKey === 'nome' || columnKey === 'projeto' || columnKey === 'resultado') {\n            valA = valA.toLowerCase();\n            valB = valB.toLowerCase();\n            if (valA < valB) return currentSortOrder === 'asc' ? -1 : 1;\n            if (valA > valB) return currentSortOrder === 'asc' ? 1 : -1;\n            return 0;\n        } else if (columnKey === 'pontuacao') {\n            return currentSortOrder === 'asc' ? valA - valB : valB - valA;\n        } else if (columnKey === 'created_at') {\n            // Converter string para data para ordenação correta\n            const dateA = new Date(valA.replace(/(\\d{2})\\/(\\d{2})\\/(\\d{4}), (\\d{2}):(\\d{2}):(\\d{2})/, '$3-$2-$1T$4:$5:$6'));\n            const dateB = new Date(valB.replace(/(\\d{2})\\/(\\d{2})\\/(\\d{4}), (\\d{2}):(\\d{2}):(\\d{2})/, '$3-$2-$1T$4:$5:$6'));\n            return currentSortOrder === 'asc' ? dateA - dateB : dateB - dateA;\n        }\n        return 0;\n    });\n\n    renderTable();\n    updateSortIndicators();\n}\n\n// Atualizar indicadores visuais de ordenação no cabeçalho\nfunction updateSortIndicators() {\n    const headers = document.querySelectorAll('#dataTable thead th');\n    headers.forEach(th => {\n        th.classList.remove('sort-asc', 'sort-desc');\n        const key = th.getAttribute('data-key');\n        if (key === currentSortColumn) {\n            th.classList.add(currentSortOrder === 'asc' ? 'sort-asc' : 'sort-desc');\n        }\n    });\n}\n\n// Configurar cabeçalhos clicáveis para ordenar\nfunction setupSortableHeaders() {\n    const headers = document.querySelectorAll('#dataTable thead th[data-key]');\n    headers.forEach(th => {\n        th.addEventListener('click', () => {\n            const key = th.getAttribute('data-key');\n            sortByColumn(key);\n        });\n    });\n}\n\nfunction init() {\n    const data = dashboardData.dados || [];\n    const stats = dashboardData.stats || {};\n\n    userData = data;\n    filteredData = [...userData];\n\n    // Preenche os cards principais\n    document.getElementById('totalUsers').textContent = stats.total || 0;\n    document.getElementById('aprovadosIncubacao').textContent = stats.aprovadosIncubacao || 0;\n    document.getElementById('trilhaAvancada').textContent = stats.trilhaAvancada || 0;\n    document.getElementById('trilhaInicial').textContent = stats.trilhaInicial || 0;\n    document.getElementById('naoConcluido').textContent = stats.naoConcluido || 0;\n\n    // Preenche o novo card: Nome do mês atual (sem texto \"Inscrições em\")\n    const nomeMesAtual = nomeMesPorNumero(stats.mesAtual);\n    document.getElementById('cadastrosMesAtual').textContent = stats.inscricoesMesAtual || 0;\n    document.getElementById('labelMesAtual').textContent = nomeMesAtual;\n\n    // Preenche select de meses disponíveis para filtro\n    const selectMes = document.getElementById('selectMes');\n    const filtroMesesDiv = document.getElementById('filtroMeses');\n    if (selectMes && stats.cadastradosPorMes) {\n        selectMes.innerHTML = '';\n        Object.keys(stats.cadastradosPorMes)\n        .sort((a, b) => {\n            // Ordenar decrescente: mais recente primeiro\n            const [mA, yA] = a.split('/');\n            const [mB, yB] = b.split('/');\n            return Number(yB + mB) - Number(yA + mA);\n        })\n        .forEach(mes => {\n            const opt = document.createElement('option');\n            opt.value = mes;\n            opt.textContent = mes + ' (' + stats.cadastradosPorMes[mes] + ')';\n            selectMes.appendChild(opt);\n        });\n        selectMes.value = stats.mesAtual || '';\n    }\n\n    // Evento para mudança no filtro de meses\n    if (selectMes) {\n        selectMes.addEventListener('change', function() {\n            const mesSelecionado = this.value;\n            filteredData = userData.filter(user => {\n                if (!user.created_at || user.created_at === 'N/A') return false;\n                const partes = user.created_at.split('/');\n                if (partes.length >= 2) {\n                    const mesAno = `${partes[1]}/${partes[2].slice(0,4)}`;\n                    return mesAno === mesSelecionado;\n                }\n                return false;\n            });\n            renderTable();\n            // Atualiza o card e label conforme filtro\n            document.getElementById('cadastrosMesAtual').textContent = stats.cadastradosPorMes[mesSelecionado] || 0;\n            document.getElementById('labelMesAtual').textContent = nomeMesPorNumero(mesSelecionado);\n        });\n    }\n\n    // Função para mostrar/ocultar filtro por mês\n    window.toggleMonthFilter = function() {\n        filtroMesesDiv.style.display = filtroMesesDiv.style.display === 'none' ? 'block' : 'none';\n    };\n\n    renderTable();\n    document.getElementById('loading').style.display = 'none';\n    document.getElementById('dataTable').style.display = 'table';\n\n    setupSortableHeaders();\n}\n\n// Formata telefone para padrão brasileiro com prefixo\nfunction formatPhone(phone) {\n    const digits = String(phone || '').replace(/\\D/g, '');\n    if (digits.length < 11) return digits || 'N/A';\n    return '+' + digits.slice(0,2) + ' (' + digits.slice(2,4) + ') ' + digits.slice(4,9) + '-' + digits.slice(9);\n}\n\n// Retorna classe CSS do status\nfunction getStatus(status) {\n    if (status === 'Aprovado Incubação') return { text: status, class: 'bg-green-100 text-green-800' };\n    if (status === 'Trilha Avançada') return { text: status, class: 'bg-purple-100 text-purple-800' };\n    if (status === 'Trilha Inicial') return { text: status, class: 'bg-orange-100 text-orange-800' };\n    if (status === 'Não concluído') return { text: status, class: 'bg-red-100 text-red-800' };\n    return { text: status, class: 'bg-gray-100 text-gray-800' };\n}\n\n// Retorna classe CSS para a pontuação\nfunction getScoreClass(score) {\n    if (score >= 7) return 'score-high';\n    if (score >= 4) return 'score-medium';\n    return 'score-low';\n}\n\n// Renderiza os indicadores coloridos na tabela\nfunction renderIndicators(indicadores) {\n    const items = [\n        { key: 'plano_negocios', label: 'Plano de negócios' },\n        { key: 'tam_sam_som', label: 'TamSamSom' },\n        { key: 'pesquisa_qualitativa', label: 'Pesquisa qualitativa' },\n        { key: 'mapeamento_concorrentes', label: 'Mapeamento concorrentes' },\n        { key: 'persona', label: 'Persona' },\n        { key: 'pitch', label: 'Pitch' },\n        { key: 'programas', label: 'Programas' }\n    ];\n    \n    return '<div class=\"indicators-list\">' + \n        items.map(item => \n            `<div><span class=\"indicator ${indicadores[item.key]}\"></span>${item.label}</div>`\n        ).join('') + \n        '</div>';\n}\n\n// Renderiza tabela com os dados filtrados\nfunction renderTable() {\n    const tbody = document.getElementById('tableBody');\n    tbody.innerHTML = filteredData.map(user => {\n        const statusInfo = getStatus(user.resultado);\n        const phoneFormatted = formatPhone(user.whatsapp);\n        const digits = String(user.whatsapp || '').replace(/\\D/g, '');\n        const whatsappLink = digits ? `<a href=\"https://wa.me/${digits}\" target=\"_blank\" class=\"whatsapp-btn\">WhatsApp</a>` : 'N/A';\n        const emailLink = user.email && user.email !== 'N/A' ? `<a href=\"mailto:${user.email}\" target=\"_blank\" class=\"email-btn\">Email</a>` : 'N/A';\n        const scoreClass = getScoreClass(user.pontuacao);\n        const indicatorsHtml = renderIndicators(user.indicadores);\n        \n        return '<tr class=\"hover:bg-gray-50 border-b\">' +\n            `<td class=\"p-4\"><strong>${user.nome}</strong></td>` +\n            `<td class=\"p-4\">${user.projeto}</td>` +\n            `<td class=\"p-4\"><span class=\"badge ${statusInfo.class}\">${statusInfo.text}</span></td>` +\n            `<td class=\"p-4\"><span class=\"${scoreClass}\">${user.pontuacao}</span></td>` +\n            `<td class=\"p-4\">${indicatorsHtml}</td>` +\n            `<td class=\"p-4\"><span class=\"phone\">${phoneFormatted}</span><br>${whatsappLink}</td>` +\n            `<td class=\"p-4\">${user.email}<br>${emailLink}</td>` +\n            `<td class=\"p-4\">${user.created_at}</td>` +\n            '</tr>';\n    }).join('');\n}\n\n// Aplica filtros por status, nome e projeto\nfunction applyFilters() {\n    const statusFilter = document.getElementById('filterStatus').value;\n    const nameSearch = document.getElementById('searchName').value.toLowerCase();\n    const projectSearch = document.getElementById('searchProject').value.toLowerCase();\n\n    filteredData = userData.filter(user => {\n        const matchesStatus = !statusFilter || user.resultado === statusFilter;\n        const matchesName = !nameSearch || user.nome.toLowerCase().includes(nameSearch);\n        const matchesProject = !projectSearch || user.projeto.toLowerCase().includes(projectSearch);\n        return matchesStatus && matchesName && matchesProject;\n    });\n\n    const sortBy = document.getElementById('sortBy').value;\n    filteredData.sort((a, b) => {\n        switch(sortBy) {\n            case 'nome': return a.nome.localeCompare(b.nome);\n            case 'nome-desc': return b.nome.localeCompare(a.nome);\n            case 'pontuacao': return b.pontuacao - a.pontuacao;\n            case 'pontuacao-desc': return a.pontuacao - b.pontuacao;\n            case 'created_at': return new Date(b.created_at) - new Date(a.created_at);\n            case 'created_at-desc': return new Date(a.created_at) - new Date(b.created_at);\n            default: return 0;\n        }\n    });\n\n    renderTable();\n}\n\n// Exporta os dados filtrados para Excel\nfunction exportToExcel() {\n    const wb = XLSX.utils.book_new();\n    const header = ['Nome', 'Projeto', 'Resultado', 'Pontuação', 'WhatsApp', 'E-mail', 'Data de preenchimento', 'Plano de negócios', 'TamSamSom', 'Pesquisa qualitativa', 'Mapeamento concorrentes', 'Persona', 'Pitch', 'Programas'];\n    const rows = filteredData.map(user => {\n        return [user.nome, user.projeto, user.resultado, user.pontuacao, user.whatsapp, user.email, user.created_at,\n            user.respostas_originais.plano_negocios, user.respostas_originais.tam_sam_som, user.respostas_originais.pesquisa_qualitativa, \n            user.respostas_originais.mapeamento_concorrentes, user.respostas_originais.persona, user.respostas_originais.pitch, user.respostas_originais.programas];\n    });\n    const ws = XLSX.utils.aoa_to_sheet([header, ...rows]);\n    XLSX.utils.book_append_sheet(wb, ws, 'Incubacao');\n    XLSX.writeFile(wb, 'incubacao_' + new Date().toISOString().split('T')[0] + '.xlsx');\n}\n\n// Listeners para filtros, ordenação e exportação\ndocument.getElementById('sortBy').addEventListener('change', applyFilters);\ndocument.getElementById('filterStatus').addEventListener('change', applyFilters);\ndocument.getElementById('searchName').addEventListener('input', applyFilters);\ndocument.getElementById('searchProject').addEventListener('input', applyFilters);\ndocument.getElementById('exportBtn').addEventListener('click', exportToExcel);\n\n// Inicia dashboard\ninit();\n\n\n    </script>\n</body>\n</html>\n","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1088,352],"id":"4a55a673-b002-44a7-94aa-217e55bcaeb7","name":"Edit Fields"},{"parameters":{"respondWith":"text","responseBody":"={{ $json.response }}","options":{"responseCode":200,"responseHeaders":{"entries":[{"name":"Content-Type","value":"text/html"}]}}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.1,"position":[1280,352],"id":"a52953ea-2e50-42ee-bb87-14658a3cc50d","name":"Respond to Webhook"}],"connections":{"Webhook Trigger":{"main":[[{"node":"Busca Supabase","type":"main","index":0}]]},"Busca Supabase":{"main":[[{"node":"Processar Dados","type":"main","index":0}]]},"Processar Dados":{"main":[[{"node":"Edit Fields","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Respond to Webhook","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"05deb2f3-16f8-4f0c-bc08-0cf94493c9b0","triggerCount":1,"shared":[{"createdAt":"2025-07-08T21:44:19.877Z","updatedAt":"2025-07-08T21:44:19.877Z","role":"workflow:owner","workflowId":"ZyirVQkghBhmjaxg","projectId":"bmuGqAprRmP37IQy"}],"tags":[]}